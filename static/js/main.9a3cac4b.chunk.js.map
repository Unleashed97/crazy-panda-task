{"version":3,"sources":["components/Button/index.js","components/Countries/index.js","components/Pagination/index.js","components/Filtration/index.js","components/Countries/DataLoader.js","App.js","index.js"],"names":["index","className","onClick","children","Countries","countries","handleCategoryClick","sortCategory","sortOrder","map","category","Button","type","width","height","d","country","name","common","capital","area","population","Pagination","itemsPerPage","totalItems","currentPageNumber","handlePagButtonClick","numberOfPages","i","Math","ceil","push","item","Filtration","handleInputChange","action","htmlFor","id","placeholder","onChange","DataLoader","App","useState","setCountries","currentPage","setCurrentPage","currentPageItems","setCurrentPageItems","setSortCategory","setSortOrder","filtratedCountries","setFiltratedCountries","inputValue","setInputValue","loaded","setLoaded","useEffect","getCountries","a","fetch","response","ok","json","console","log","status","filter","String","toLowerCase","includes","sort","b","Intl","Collator","compare","first","second","undefined","sortCountries","lastItem","firstItem","slice","getCurrentPageItems","e","filterRequest","target","value","trim","length","pageNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a3cac4b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './button.scss'\r\n\r\nconst index = ({ className, onClick, children }) => {\r\n    return (\r\n        <button className={className} onClick={onClick}>\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default index\r\n","import React from 'react'\r\n\r\nimport Button from '../Button/'\r\n\r\nimport './countries.scss'\r\n\r\nconst Countries = ({\r\n    countries,\r\n    handleCategoryClick,\r\n    sortCategory,\r\n    sortOrder,\r\n}) => {\r\n    const categories = ['Country', 'Capital', 'Area', 'Population']\r\n\r\n    return (\r\n        <div className=\"table__wrapper\">\r\n            <table className=\"table\">\r\n                <thead className=\"table__header\">\r\n                    <tr className=\"table__row\">\r\n                        {categories.map((category, index) => (\r\n                            <th\r\n                                className=\"table__cell table__cell--head\"\r\n                                key={category + index}\r\n                            >\r\n                                <Button\r\n                                    className=\"btn btn--cell-head\"\r\n                                    type=\"button\"\r\n                                    onClick={() =>\r\n                                        handleCategoryClick(category)\r\n                                    }\r\n                                >\r\n                                    {category} &nbsp;\r\n                                    {category === sortCategory ? (\r\n                                        sortOrder ? (\r\n                                            <svg width=\"8\" height=\"10\">\r\n                                                <path d=\"M0 6 L4 0 L8 6 L0 6\" />\r\n                                            </svg>\r\n                                        ) : (\r\n                                            <svg width=\"8\" height=\"10\">\r\n                                                <path d=\"M0 0 L8 0 L4 6 L0 0\" />\r\n                                            </svg>\r\n                                        )\r\n                                    ) : (\r\n                                        <svg width=\"8\" height=\"14\">\r\n                                            <path d=\"M0 6 L4 0 L8 6 L0 6 M0 8 L8 8 L4 14 L0 8\" />\r\n                                        </svg>\r\n                                    )}\r\n                                </Button>\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"table__body\">\r\n                    {countries &&\r\n                        countries.map((country, index) => (\r\n                            <tr\r\n                                className=\"table__row\"\r\n                                key={country.name.common + index}\r\n                            >\r\n                                <td className=\"table__cell table__cell--body\">\r\n                                    {country.name.common}\r\n                                </td>\r\n                                <td\r\n                                    className={\r\n                                        country?.capital\r\n                                            ? 'table__cell table__cell--body'\r\n                                            : 'table__cell table__cell--body table__cell--unknown'\r\n                                    }\r\n                                >\r\n                                    {country.capital\r\n                                        ? country.capital[0]\r\n                                        : 'unknown'}\r\n                                </td>\r\n                                <td className=\"table__cell table__cell--body\">\r\n                                    {country.area}\r\n                                </td>\r\n                                <td className=\"table__cell table__cell--body\">\r\n                                    {country.population}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Countries\r\n","import React from 'react'\r\n\r\nimport Button from '../Button/'\r\n\r\nimport './pagination.scss'\r\n\r\nconst Pagination = ({\r\n    itemsPerPage,\r\n    totalItems,\r\n    currentPageNumber,\r\n    handlePagButtonClick,\r\n}) => {\r\n    const numberOfPages = []\r\n\r\n    for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {\r\n        numberOfPages.push(i)\r\n    }\r\n\r\n    return (\r\n        <ul className=\"pagination\">\r\n            {numberOfPages.map((item) => (\r\n                <li className=\"pagination__item\" key={item}>\r\n                    <Button\r\n                        className={\r\n                            currentPageNumber === item\r\n                                ? 'btn btn--pagination active'\r\n                                : 'btn btn--pagination'\r\n                        }\r\n                        onClick={() => handlePagButtonClick(item)}\r\n                    >\r\n                        <span className=\"btn__number\">{item}</span>\r\n                    </Button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\nexport default Pagination\r\n","import React from 'react'\r\n\r\nimport './filtration.scss'\r\n\r\nconst Filtration = ({ handleInputChange }) => {\r\n    return (\r\n        <form action=\"\" className=\"form\">\r\n            <label className=\"form__label\" htmlFor=\"form__input\">\r\n                Filtration: &nbsp;\r\n                <input\r\n                    id=\"form__input\"\r\n                    className=\"form__input\"\r\n                    type=\"text\"\r\n                    placeholder=\"type your request here\"\r\n                    onChange={handleInputChange}\r\n                />\r\n            </label>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Filtration\r\n","import React from 'react'\r\n\r\nimport './loader.scss'\r\n\r\nconst DataLoader = () => {\r\n    return <div className=\"loader\"></div>\r\n}\r\n\r\nexport default DataLoader\r\n","import React, { useState, useEffect } from 'react'\n\nimport Countries from './components/Countries/'\nimport Pagination from './components/Pagination/'\nimport Filtration from './components/Filtration/'\n\nimport './scss/style.scss'\nimport DataLoader from './components/Countries/DataLoader'\n\nfunction App() {\n    const [countries, setCountries] = useState([])\n    const [itemsPerPage, setItemsPerPage] = useState(50)\n    const [currentPage, setCurrentPage] = useState(1)\n    const [currentPageItems, setCurrentPageItems] = useState([])\n\n    // sorting\n    const [sortCategory, setSortCategory] = useState('Country')\n    const [sortOrder, setSortOrder] = useState(true)\n    // true is asc, false is desc\n\n    // filtration\n    const [filtratedCountries, setFiltratedCountries] = useState([])\n    const [inputValue, setInputValue] = useState('')\n\n    // Loader\n    const [loaded, setLoaded] = useState(false)\n\n    useEffect(() => {\n        const getCountries = async () => {\n            const response = await fetch('https://restcountries.com/v3.1/all')\n            if (response.ok) {\n                const countries = await response.json()\n                setLoaded(true)\n                setCountries(countries)\n            } else console.log(`Error ${response.status}`)\n        }\n        getCountries()\n    }, [])\n\n    useEffect(() => {\n        // filtration\n        setCurrentPage(1)\n        setFiltratedCountries(\n            countries.filter((country) => {\n                if (\n                    country.name.common &&\n                    String(country.name.common)\n                        .toLowerCase()\n                        .includes(inputValue)\n                ) {\n                    return true\n                } else if (\n                    country.capital &&\n                    String(country.capital).toLowerCase().includes(inputValue)\n                ) {\n                    return true\n                } else if (\n                    country.area &&\n                    String(country.area).toLowerCase().includes(inputValue)\n                ) {\n                    return true\n                } else if (\n                    country.population &&\n                    String(country.population)\n                        .toLowerCase()\n                        .includes(inputValue)\n                ) {\n                    return true\n                } else return false\n            }),\n        )\n    }, [countries, inputValue])\n\n    useEffect(() => {\n        // sorting\n        const sortCountries = () => {\n            switch (sortCategory) {\n                case 'Country':\n                    setFiltratedCountries(\n                        filtratedCountries.sort((a, b) => {\n                            if (a.name.common === b.name.common) return 0\n                            else if (sortOrder) {\n                                return new Intl.Collator().compare(\n                                    a.name.common,\n                                    b.name.common,\n                                )\n                            } else {\n                                return (\n                                    new Intl.Collator().compare(\n                                        a.name.common,\n                                        b.name.common,\n                                    ) * -1\n                                )\n                            }\n                        }),\n                    )\n                    break\n                case 'Capital':\n                    setFiltratedCountries(\n                        filtratedCountries.sort((a, b) => {\n                            const first = a && a.capital\n                            const second = b && b.capital\n                            if (first === second) return 0\n                            else if (first === undefined) return 1\n                            else if (second === undefined) return -1\n                            else if (sortOrder) {\n                                return first > second ? 1 : -1\n                            } else {\n                                return first > second ? -1 : 1\n                            }\n                        }),\n                    )\n                    break\n                case 'Area':\n                    setFiltratedCountries(\n                        filtratedCountries.sort((a, b) => {\n                            return sortOrder ? a.area > b.area : a.area < b.area\n                        }),\n                    )\n                    break\n                case 'Population':\n                    setFiltratedCountries(\n                        filtratedCountries.sort((a, b) => {\n                            return sortOrder\n                                ? a.population > b.population\n                                : a.population < b.population\n                        }),\n                    )\n                    break\n                default:\n                    break\n            }\n        }\n        sortCountries()\n    }, [filtratedCountries, sortCategory, sortOrder])\n\n    useEffect(() => {\n        // split countries into pages\n        const getCurrentPageItems = () => {\n            const lastItem = currentPage * itemsPerPage\n            const firstItem = lastItem - itemsPerPage\n            setCurrentPageItems(filtratedCountries.slice(firstItem, lastItem))\n        }\n        getCurrentPageItems()\n    }, [filtratedCountries, currentPage, itemsPerPage, sortCategory, sortOrder])\n\n    // pagination\n    const paginationButtonClick = (pageNumber) => {\n        setCurrentPage(pageNumber)\n    }\n\n    // category\n    const selectCategory = (category) => {\n        if (category === sortCategory) {\n            setSortOrder(!sortOrder)\n        } else {\n            setSortCategory(category)\n            setSortOrder(true)\n        }\n    }\n\n    // filtration\n    const filtration = (e) => {\n        const filterRequest = e.target.value.trim().toLowerCase()\n        setInputValue(filterRequest)\n    }\n    return (\n        <div className=\"wrapper\">\n            <section className=\"section\">\n                <h1 className=\"section__title\">Crazy Panda test task</h1>\n                <div className=\"section__content\">\n                    <Filtration handleInputChange={filtration} />\n\n                    {loaded ? (\n                        <>\n                            <Countries\n                                countries={currentPageItems}\n                                handleCategoryClick={selectCategory}\n                                sortCategory={sortCategory}\n                                sortOrder={sortOrder}\n                            />\n                            <Pagination\n                                itemsPerPage={itemsPerPage}\n                                totalItems={filtratedCountries.length}\n                                currentPageNumber={currentPage}\n                                handlePagButtonClick={paginationButtonClick}\n                            />\n                        </>\n                    ) : (\n                        <DataLoader />\n                    )}\n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}